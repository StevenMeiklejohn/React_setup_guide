Make directory
-----------------------
mkdir react-hello-world
cd react-hello-world
npm init


Install webpack
----------------
npm i webpack -S

touch webpack,config.js

update the config file;
-----------------------

var webpack = require('webpack');
var path = require('path');

var config = {
  entry: __dirname + "/client/src/app.js",
  output: {
    filename: "bundle.js",
    path: __dirname + "/client/build"
  },
  devtool: 'source-map'
}

module.exports = config;

--------------------------------

* APP_DIR = directory of app code.
BUILD_DIR = directory of bundle file output.


make other directories
-----------------------
mkdir client
cd client
mkdir build
mkdir src
mkdir src/models src/views

touch client/build/index.html
add to index.html
----------------------------
<html>
  <head>
    <meta charset="utf-8">
    <title>React.js using NPM, Babel6 and Webpack</title>
  </head>
  <body>
    <div id="app" />
    <script src="public/bundle.js" type="text/javascript"></script>
  </body>
</html>
-----------------------------------------------------------------------


touch client/srcapp.js
add to app.js;
console.log('Hello World!');


touch src/app.js
-------------------------------
start webpack
at same level as webpack.config.js;

webpack -w
-----------------------------------

create server.js
------------------
var express = require('express');
var app = express();
var path = require('path')

app.get('/', function (req, res) {
  res.sendFile(path.join(__dirname + '/client/build/index.html'));
});

app.use(express.static('client/build'));


var server = app.listen(3000, function () {
  var host = server.address().address;
  var port = server.address().port;

  console.log('Example app listening at http://%s:%s', host, port);
});
-------------------------------------------------------------------
-------------------------------------------------------------------


install babel(converts ES6 and JSX for all browsers)
----------------------------------------------------
npm install --save-dev babel-loader babel-core babel-preset-react



--------------------------------------

Tell webpack to use the babel loader
-------------------------------------

  devtool: 'source-map',
  module:{
      rules: [{
        test: /\.jsx?$/,
        exclude: /(node_modules)/,
        loader: 'babel-loader',
        query: {
          presets: ['es2015', 'react']
        }
      }]
    }
}
----------------------------------------------------
-----------------------------------------------------
------------------------------------------------------


Setup render
-------------
in the index html add a div with id = "app"

update the index.jsx with the following;
------------------------------------------
import React from 'react';
import {render} from 'react-dom';

class App extends React.Component {
  render () {
    return <p> Hello React!</p>;
  }
}


window.onload = () => {
  render(<App/>, document.getElementById('app'));
};
----------------------------------------------------
----------------------------------------------------

Install react and react-dom
---------------------------------
npm i react react-dom -S

----------------------------------
------------------------------------
type;

nodemon server.js (with webpack running).
You should see 'Hello React' in the browser.





Adding new components
--------------------------
--------------------------
in src, create a folder called components.

touch AwesomeComponent.jsx

add the follwing to the file.

--------------------------------------------
import React from 'react';

class AwesomeComponent extends React.Component {

  constructor(props) {
    super(props);
    this.state = {likesCount : 0};
    this.onLike = this.onLike.bind(this);
  }

  onLike () {
    let newLikesCount = this.state.likesCount + 1;
    this.setState({likesCount: newLikesCount});
  }

  render() {
    return (
      <div>
        Likes : <span>{this.state.likesCount}</span>
        <div><button onClick={this.onLike}>Like Me</button></div>
      </div>
    );
  }

}

export default AwesomeComponent;
------------------------------------------------------------------
------------------------------------------------------------------

add the following to the index.jsx;
-----------------------------------------------

import React from 'react';
import {render} from 'react-dom';
import AwesomeComponent from './components/AwesomeComponent.jsx';

class App extends React.Component {
  render () {
    return (
      <div>
      <p>Hello React!</p>
      <AwesomeComponent />
      </div>
      )
    }
};

window.onload = () => {
  render(<App/>, document.getElementById('app'));
};

----------------------------------------------------
----------------------------------------------------








